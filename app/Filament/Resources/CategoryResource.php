<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CategoryResource\Pages;
use App\Models\Category;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;

class CategoryResource extends Resource
{
    protected static ?string $model = Category::class;

    protected static ?string $navigationIcon = 'heroicon-o-folder';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                //name
                TextInput::make('name')
                    ->label('Category Name')
                    ->placeholder('Category Name')
                    ->required(),

                //description
                Textarea::make('description')
                    ->label('Description')
                    ->placeholder('Description')
                    ->rows(5)
                    ->required(),

            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('name')
                    ->searchable(),
                TextColumn::make('description')
                    ->searchable(),
            ])
            ->filters([
                //
            ])
            ->actions([
                EditAction::make(),
                DeleteAction::make('delete')
                    ->action(function (Category $record, $data) {
                        if ($record->posts()->exists()) {
                            Notification::make()
                                ->title('Deletion Failed')
                                ->body('Cannot delete category because it has associated posts.')
                                ->warning()
                                ->send();

                            return; // Batalkan proses
                        }

                        $record->delete();

                        Notification::make()
                            ->title('Deleted')
                            ->body('Category has been successfully deleted.')
                            ->success()
                            ->send();
                    })
                    ->color('danger')
                    ->requiresConfirmation(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('deleteSelected')
                        ->label('Delete Selected')
                        ->action(function ($records) {
                            $successCount = 0;

                            foreach ($records as $record) {
                                if ($record->posts()->exists()) {
                                    Notification::make()
                                        ->title('Deletion Skipped')
                                        ->body('Category ' . $record->name . ' has associated posts and was not deleted.')
                                        ->warning()
                                        ->send();
                                } else {
                                    $record->delete();
                                    $successCount++;
                                }
                            }

                            if ($successCount > 0) {
                                Notification::make()
                                    ->title('Deletion Completed')
                                    ->body('Successfully deleted ' . $successCount . ' categories.')
                                    ->success()
                                    ->send();
                            }
                        })
                        ->requiresConfirmation()
                        ->color('danger'),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->orderByDesc('created_at');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCategories::route('/'),
            'create' => Pages\CreateCategory::route('/create'),
            'edit' => Pages\EditCategory::route('/{record:slug}/edit'),
        ];
    }

    public static function getGloballySearchableAttributes(): array
    {
        return ['name']; // TODO: Change the autogenerated stub
    }
}
